#ifndef BITWISE_LIST_3VARS_H
#define BITWISE_LIST_3VARS_H

#include <string>

namespace LSiMBA {

const std::vector<std::string> Bitwise_List_1 = {"0", "X[0]"};

const std::vector<std::string> Bitwise_List_2 = {
    "0",             // [0 0 0 0]
    "(X[0]&~X[1])",  // [0 1 0 0]
    "~(X[0]|~X[1])", // [0 0 1 0]
    "(X[0]^X[1])",   // [0 1 1 0]
    "(X[0]&X[1])",   // [0 0 0 1]
    "X[0]",          // [0 1 0 1]
    "X[1]",          // [0 0 1 1]
    "(X[0]|X[1])"    // [0 1 1 1]
};

const std::vector<std::string> Bitwise_List_3 = {
    "0",
    "~(~X[0]|(X[1]|X[2]))",
    "~(X[0]|(~X[1]|X[2]))",
    "(~X[2]&(X[0]^X[1]))",
    "~(~X[0]|(~X[1]|X[2]))",
    "(X[0]&~X[2])",
    "(X[1]&~X[2])",
    "(X[2]^(X[0]|(X[1]|X[2])))",
    "(~X[0]&(~X[1]&X[2]))",
    "(~X[1]&(X[0]^X[2]))",
    "(~X[0]&(X[1]^X[2]))",
    "(~(X[0]&X[1])&(X[0]^(X[1]^X[2])))",
    "(~(X[0]^X[1])&(X[0]^X[2]))",
    "(X[2]^(X[0]|(X[1]&X[2])))",
    "(~(X[0]&~X[1])&(X[1]^X[2]))",
    "(X[2]^(X[0]|X[1]))",
    "(X[0]&(~X[1]&X[2]))",
    "(X[0]&~X[1])",
    "((X[0]^X[1])&~(X[0]^X[2]))",
    "(X[1]^(X[0]|(X[1]&X[2])))",
    "(X[0]&(X[1]^X[2]))",
    "~(~X[0]|(X[1]&X[2]))",
    "((X[0]|X[1])&(X[1]^X[2]))",
    "((X[0]&X[1])^~(X[0]^(~X[1]|X[2])))",
    "~(X[1]|~X[2])",
    "(X[1]^(X[0]|(X[1]|X[2])))",
    "(~(X[0]&X[1])&(X[1]^X[2]))",
    "(X[1]^(X[0]|X[2]))",
    "((X[0]|~X[1])&(X[1]^X[2]))",
    "((X[0]&X[2])^(X[0]^(~X[1]&X[2])))",
    "(X[1]^X[2])",
    "((X[0]&~X[1])|(X[1]^X[2]))",
    "(~X[0]&(X[1]&X[2]))",
    "((X[0]^X[1])&(X[0]^X[2]))",
    "~(X[0]|~X[1])",
    "(X[1]^~(~X[0]|(~X[1]&X[2])))",
    "(X[1]&(X[0]^X[2]))",
    "(X[2]^(X[0]|(~X[1]&X[2])))",
    "(X[1]&~(X[0]&X[2]))",
    "(X[1]^~(~X[0]|(X[1]^X[2])))",
    "~(X[0]|~X[2])",
    "(X[2]^(X[0]&(~X[1]|X[2])))",
    "(~X[0]&(X[1]|X[2]))",
    "(X[0]^(X[1]|X[2]))",
    "(X[2]^(X[0]&(X[1]|X[2])))",
    "(X[0]^X[2])",
    "((X[0]&X[2])^(X[1]|X[2]))",
    "(X[2]^~(~X[0]&(~X[1]|X[2])))",
    "(X[2]&(X[0]^X[1]))",
    "(X[1]^~(~X[0]&(~X[1]|X[2])))",
    "(X[1]^(X[0]&(X[1]|X[2])))",
    "(X[0]^X[1])",
    "((X[0]|X[1])&~(X[0]^(X[1]^X[2])))",
    "(X[0]^(X[1]&X[2]))",
    "(X[1]^(X[0]&X[2]))",
    "(X[1]^(X[0]&(~X[1]|X[2])))",
    "(X[2]&~(X[0]&X[1]))",
    "(X[1]^(X[0]|(X[1]^X[2])))",
    "((X[0]&X[1])^(X[1]|X[2]))",
    "(X[1]^(X[0]|(~X[1]&X[2])))",
    "(X[2]^(X[0]&X[1]))",
    "(X[2]^~(~X[0]|(~X[1]&X[2])))",
    "(~(X[0]|~X[1])|(X[1]^X[2]))",
    "((X[0]^X[1])|(X[0]^X[2]))",
    "(X[0]&(X[1]&X[2]))",
    "~(~X[0]|(X[1]^X[2]))",
    "(X[1]&~(X[0]^X[2]))",
    "((X[0]|X[1])&(X[0]^(X[1]^X[2])))",
    "(X[0]&X[1])",
    "~(~X[0]|(~X[1]&X[2]))",
    "(X[1]&(X[0]|~X[2]))",
    "((X[1]&~X[2])|~(~X[0]|(~X[1]&X[2])))",
    "(X[2]&~(X[0]^X[1]))",
    "((X[0]|~X[1])&(X[0]^(X[1]^X[2])))",
    "(~(X[0]&~X[1])&(X[0]^(X[1]^X[2])))",
    "(X[0]^(X[1]^X[2]))",
    "(X[1]^(~X[0]&(X[1]|X[2])))",
    "(X[0]^(~X[1]&X[2]))",
    "(X[1]^~(X[0]|~X[2]))",
    "((X[0]&X[1])|(X[0]^(X[1]^X[2])))",
    "(X[0]&X[2])",
    "(X[0]&(~X[1]|X[2]))",
    "(X[2]^(~X[0]&(X[1]|X[2])))",
    "~(X[0]^(~X[1]|X[2]))",
    "(X[0]&(X[1]|X[2]))",
    "X[0]",
    "((X[0]&X[2])|(X[1]&~X[2]))",
    "~(~X[0]&(~X[1]|X[2]))",
    "(X[2]&(X[0]|~X[1]))",
    "((X[1]&~X[2])^(X[0]|(X[1]^X[2])))",
    "(X[2]^~(X[0]|~X[1]))",
    "((X[0]&~X[1])|(X[0]^(X[1]^X[2])))",
    "((X[0]&X[1])|~(X[1]|~X[2]))",
    "(X[0]|(~X[1]&X[2]))",
    "((X[0]&X[1])|(X[1]^X[2]))",
    "(X[0]|(X[1]^X[2]))",
    "(X[1]&X[2])",
    "((X[0]|X[1])&~(X[1]^X[2]))",
    "(X[1]&~(X[0]&~X[2]))",
    "(X[1]^(X[0]&~X[2]))",
    "(X[1]&(X[0]|X[2]))",
    "((X[0]&X[2])^(X[0]^(X[1]&X[2])))",
    "X[1]",
    "(X[1]|(X[0]&~X[2]))",
    "(X[2]&~(X[0]&~X[1]))",
    "(X[2]^(X[0]&~X[1]))",
    "((X[1]&X[2])|(~X[0]&(X[1]|X[2])))",
    "(~(X[0]|~X[1])|(X[0]^(X[1]^X[2])))",
    "(X[1]^(~X[0]&(X[1]^X[2])))",
    "(X[2]^~(~X[0]|(X[1]&X[2])))",
    "(X[1]|~(X[0]|~X[2]))",
    "(X[1]|(X[0]^X[2]))",
    "(X[2]&(X[0]|X[1]))",
    "((X[0]&X[1])^(X[0]^(X[1]&X[2])))",
    "(X[1]^(X[0]&(X[1]^X[2])))",
    "(X[1]^~(~X[0]|(X[1]&X[2])))",
    "((X[1]&X[2])|(X[0]&(X[1]|X[2])))",
    "(X[0]|(X[1]&X[2]))",
    "(X[1]|(X[0]&X[2]))",
    "(X[0]|X[1])",
    "X[2]",
    "(X[2]|(X[0]&~X[1]))",
    "(X[2]|~(X[0]|~X[1]))",
    "(X[2]|(X[0]^X[1]))",
    "(X[2]|(X[0]&X[1]))",
    "(X[0]|X[2])",
    "(X[1]|X[2])",
    "(X[0]|(X[1]|X[2]))"};
} // namespace LSiMBA

#endif // LSIMBA_H